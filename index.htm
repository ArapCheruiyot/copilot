<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Google Drive File Manager</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }

        #authorize_button, #signout_button {
            display: none;
            margin: 20px 0;
        }

        #uploadSection, #downloadSection {
            display: none;
        }

        .container {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            max-width: 600px;
            margin: 40px auto;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        .progress-container {
            width: 100%;
            background-color: #ddd;
            margin-top: 10px;
        }

        .progress-bar {
            width: 0;
            height: 20px;
            background-color: #4caf50;
        }

        ul {
            list-style-type: none;
            padding: 0;
        }

        li {
            padding: 8px;
            background-color: #f9f9f9;
            margin-bottom: 4px;
            border-radius: 4px;
            cursor: pointer;
        }

        li:hover {
            background-color: #ececec;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Google Drive File Manager</h1>
        <button id="authorize_button" onclick="handleAuthClick()">Authorize</button>
        <button id="signout_button" onclick="handleSignoutClick()">Sign Out</button>

        <div id="uploadSection">
            <h2>Upload Files</h2>
            <input type="file" id="file_input" multiple onchange="handleFileSelection()">
            <ul id="file_list"></ul>
            <button onclick="uploadFiles()">Upload</button>
            <div class="progress-container">
                <div id="progress_bar" class="progress-bar"></div>
            </div>
        </div>

        <div id="downloadSection">
            <h2>Download Files</h2>
            <ul id="file_list"></ul>
        </div>
    </div>

    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
    <script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>
    <script>
        const CLIENT_ID = '958416089916-1embl17stmkectofeqb74c54ccs38rb5.apps.googleusercontent.com';
        const API_KEY = 'AIzaSyAALlUlP_k88sz4F_W1LZaADaIgkyHcM-4';
        const DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"];
        const SCOPES = 'https://www.googleapis.com/auth/drive';

        let tokenClient;
        let gapiInited = false;
        let gisInited = false;
        let selectedFiles = [];

        function gapiLoaded() {
            gapi.load('client', initializeGapiClient);
        }

        async function initializeGapiClient() {
            await gapi.client.init({
                apiKey: API_KEY,
                discoveryDocs: DISCOVERY_DOCS,
            });
            gapiInited = true;
            maybeEnableButtons();
        }

        function gisLoaded() {
            tokenClient = google.accounts.oauth2.initTokenClient({
                client_id: CLIENT_ID,
                scope: SCOPES,
                callback: '',
            });
            gisInited = true;
            maybeEnableButtons();
        }

        function maybeEnableButtons() {
            if (gapiInited && gisInited) {
                document.getElementById('authorize_button').style.display = 'block';
            }
        }

        function handleAuthClick() {
            tokenClient.callback = async (resp) => {
                if (resp.error) {
                    throw (resp);
                }
                document.getElementById('authorize_button').style.display = 'none';
                document.getElementById('signout_button').style.display = 'block';
                document.getElementById('uploadSection').style.display = 'block';
                document.getElementById('downloadSection').style.display = 'block';
                listFiles();
            };

            if (gapi.client.getToken() === null) {
                tokenClient.requestAccessToken({ prompt: 'consent' });
            } else {
                tokenClient.requestAccessToken({ prompt: '' });
            }
        }

        function handleSignoutClick() {
            const token = gapi.client.getToken();
            if (token !== null) {
                google.accounts.oauth2.revoke(token.access_token);
                gapi.client.setToken('');
                document.getElementById('authorize_button').style.display = 'block';
                document.getElementById('signout_button').style.display = 'none';
                document.getElementById('uploadSection').style.display = 'none';
                document.getElementById('downloadSection').style.display = 'none';
            }
        }

        function handleFileSelection() {
            const fileInput = document.getElementById('file_input');
            selectedFiles = Array.from(fileInput.files);
            const fileList = document.getElementById('file_list');
            fileList.innerHTML = '';
            selectedFiles.forEach(file => {
                const li = document.createElement('li');
                li.textContent = file.name;
                fileList.appendChild(li);
            });
        }

        async function uploadFiles() {
            if (!selectedFiles.length) {
                alert('Please select at least one file to upload.');
                return;
            }

            const folderId = '1rSxY5C7YCGFS1mpwlAckQQuBTAn8OQH-'; // Replace with your folder ID

            let uploadedFilesCount = 0;

            for (let file of selectedFiles) {
                const metadata = {
                    'name': file.name,
                    'mimeType': file.type || 'application/octet-stream',
                    'parents': [folderId],
                };
                const accessToken = gapi.auth.getToken().access_token;
                const form = new FormData();
                form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
                form.append('file', file);

                const xhr = new XMLHttpRequest();
                xhr.open('POST', 'https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id', true);
                xhr.setRequestHeader('Authorization', 'Bearer ' + accessToken);

                // Track upload progress
                xhr.upload.onprogress = function (event) {
                    if (event.lengthComputable) {
                        const percent = (event.loaded / event.total) * 100;
                        document.getElementById('progress_bar').style.width = percent + '%';
                    }
                };

                xhr.onload = function () {
                    if (xhr.status === 200) {
                        uploadedFilesCount++;
                        console.log(`File "${file.name}" uploaded successfully.`);
                        // Check if all files have been uploaded
                        if (uploadedFilesCount === selectedFiles.length) {
                            document.getElementById('progress_bar').style.width = '100%';
                            alert('All files uploaded successfully.');
                            selectedFiles = [];
                            document.getElementById('file_list').innerHTML = '';
                            document.getElementById('progress_bar').style.width = '0'; // Reset progress bar
                        }
                    } else {
                        console.error(`Error uploading file "${file.name}".`);
                    }
                };

                xhr.onerror = function () {
                    console.error(`Error uploading file "${file.name}".`);
                };

                xhr.send(form);
            }
        }

        async function listFiles() {
            const folderId = '1rSxY5C7YCGFS1mpwlAckQQuBTAn8OQH-'; // Replace with your folder ID
            try {
                const response = await gapi.client.drive.files.list({
                    q: `'${folderId}' in parents`,
                    fields: 'files(id, name)',
                });
                const files = response.result.files;
                if (files && files.length > 0) {
                    const fileList = document.getElementById('file_list');
                    fileList.innerHTML = '';
                    files.forEach(file => {
                        const li = document.createElement('li');
                        li.textContent = file.name;
                        li.onclick = () => downloadFile(file.id, file.name);
                        fileList.appendChild(li);
                    });
                } else {
                    alert('No files found in the folder.');
                }
           [_{{{CITATION{{{_1{](https://github.com/mikehibm/ec2panel/tree/d2e1b4eca64ef2bebdeb111bf5e2e13e4b76466c/utils%2Fgoogle-api.ts)[_{{{CITATION{{{_2{](https://github.com/neostudio-team/GridaBoard2/tree/0dd87e0bcb7cf3608b2a1ba1ec5325d3fe4ac9cd/src%2Fcomponents%2Fnavbar%2FUpload.js)
